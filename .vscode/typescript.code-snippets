{
  "api-get-ky": {
    "prefix": "api-get-ky",
    "body": [
      "import { api } from '~apis/api.ts';",
      "import { APIResponse } from '~types/api';",
      "",
      "export type ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}RequestType = {",
      "  ${1:// Define request type here}",
      "};",
      "",
      "export type ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}ResponseType = {",
      "  ${2:// Define response type here}",
      "};",
      "",
      "export const ${TM_FILENAME_BASE} = async (params: ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}RequestType): Promise<APIResponse<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}ResponseType>> => {",
      "  try {",
      "    const response = await api.get(`${3:endpoint}`, { searchParams: params }).json<APIResponse<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}ResponseType>>();",
      "    return response;",
      "  } catch (error) {",
      "    console.error('Error:', error);",
      "    throw error;",
      "  }",
      "};"
    ],
    "description": "Fetch data using GET request with ky"
  },
  "api-post-ky": {
    "prefix": "api-post-ky",
    "body": [
      "import { api } from '~apis/api.ts';",
      "import { APIResponse } from '~types/api';",
      "",
      "export type ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}RequestType = {",
      "  ${1:// Define request type here}",
      "};",
      "",
      "export type ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}ResponseType = {",
      "  ${2:// Define response type here}",
      "};",
      "",
      "export const ${TM_FILENAME_BASE} = async (data: ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}RequestType): Promise<APIResponse<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}ResponseType>> => {",
      "  try {",
      "    const response = await api.post(`${3:endpoint}`, { json: data }).json<APIResponse<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}ResponseType>>();",
      "    return response;",
      "  } catch (error) {",
      "    console.error('Error:', error);",
      "    throw error;",
      "  }",
      "};"
    ],
    "description": "Post data using POST request with ky"
  },
  "api-delete-ky": {
    "prefix": "api-delete-ky",
    "body": [
      "import { api } from '~apis/api.ts';",
      "import { APIResponse } from '~types/api';",
      "",
      "export type ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}RequestType = {",
      "  id: string;",
      "  ${1:// Define additional request parameters here}",
      "};",
      "",
      "export type ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}ResponseType = {",
      "  ${2:// Define response type here}",
      "};",
      "",
      "export const ${TM_FILENAME_BASE} = async ({ id, ...params }: ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}RequestType): Promise<APIResponse<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}ResponseType>> => {",
      "  try {",
      "    const response = await api.delete(`${3:endpoint}/\\${id}`, { searchParams: params }).json<APIResponse<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}ResponseType>>();",
      "    return response;",
      "  } catch (error) {",
      "    console.error('Error:', error);",
      "    throw error;",
      "  }",
      "};"
    ],
    "description": "Delete data using DELETE request with ky"
  },
  "api-put-ky": {
    "prefix": "api-put-ky",
    "body": [
      "import { api } from '~apis/api.ts';",
      "import { APIResponse } from '~types/api';",
      "",
      "export type ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}RequestType = {",
      "  id: string;",
      "  ${1:// Define request type here}",
      "};",
      "",
      "export type ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}ResponseType = {",
      "  ${2:// Define response type here}",
      "};",
      "",
      "export const ${TM_FILENAME_BASE} = async ({ id, ...data }: ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}RequestType): Promise<APIResponse<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}ResponseType>> => {",
      "  try {",
      "    const response = await api.put(`${3:endpoint}/\\${id}`, { json: data }).json<APIResponse<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}ResponseType>>();",
      "    return response;",
      "  } catch (error) {",
      "    console.error('Error:', error);",
      "    throw error;",
      "  }",
      "};"
    ],
    "description": "Update data using PUT request with ky"
  },
  "api-patch-ky": {
    "prefix": "api-patch-ky",
    "body": [
      "import { api } from '~apis/api.ts';",
      "import { APIResponse } from '~types/api';",
      "",
      "export type ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}RequestType = {",
      "  id: string;",
      "  ${1:// Define request type here}",
      "};",
      "",
      "export type ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}ResponseType = {",
      "  ${2:// Define response type here}",
      "};",
      "",
      "export const ${TM_FILENAME_BASE} = async ({ id, ...data }: Partial<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}RequestType>): Promise<APIResponse<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}ResponseType>> => {",
      "  try {",
      "    const response = await api.patch(`${3:endpoint}/\\${id}`, { json: data }).json<APIResponse<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}ResponseType>>();",
      "    return response;",
      "  } catch (error) {",
      "    console.error('Error:', error);",
      "    throw error;",
      "  }",
      "};"
    ],
    "description": "Patch data using PATCH request with ky"
  },
  "Typescript React Styled Components": {
    "scope": "typescript",
    "prefix": "sc",
    "body": [
      "import styled from '@emotion/native'",
      "",
      "export const ${1:${TM_DIRECTORY/.*\\/(.*)$/$1/}} = styled.View`",
      "  ${2}",
      "`;"
    ]
  }
}
